{"/home/travis/build/npmtest/node-npmtest-confidence/test.js":"/* istanbul instrument in package npmtest_confidence */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-confidence/lib.npmtest_confidence.js":"/* istanbul instrument in package npmtest_confidence */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_confidence = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_confidence = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-confidence/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-confidence && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_confidence */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_confidence\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_confidence.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_confidence.rollup.js'] =\n            local.assetsDict['/assets.npmtest_confidence.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_confidence.__dirname + '/lib.npmtest_confidence.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-confidence/node_modules/confidence/lib/index.js":"'use strict';\n\n// Load modules\n\nconst Store = require('./store');\nconst Id = require('./id');\n\n\n// Declare internals\n\nconst internals = {};\n\n\n// Exports components\n\nexports.Store = Store;\nexports.id = Id;\n","/home/travis/build/npmtest/node-npmtest-confidence/node_modules/confidence/lib/store.js":"'use strict';\n\n// Load modules\n\nconst Hoek = require('hoek');\nconst Boom = require('boom');\n\n\n\n// Declare internals\n\nconst internals = {};\n\nexports = module.exports = internals.Store = function (document) {\n\n    this.load(document || {});\n};\n\n\ninternals.Store.prototype.load = function (document) {\n\n    const err = internals.Store.validate(document);\n    Hoek.assert(!err, err);\n\n    this._tree = Hoek.clone(document);\n};\n\n\n// Get a filtered value\n\ninternals.Store.prototype.get = function (key, criteria, applied) {\n\n    const node = this._get(key, criteria, applied);\n    return internals.walk(node, criteria, applied);\n};\n\n\ninternals.Store.prototype._get = function (key, criteria, applied) {\n\n    const self = this;\n\n    criteria = criteria || {};\n\n    const path = [];\n    if (key !== '/') {\n        const invalid = key.replace(/\\/(\\w+)/g, ($0, $1) => {\n\n            path.push($1);\n            return '';\n        });\n\n        if (invalid) {\n            return undefined;\n        }\n    }\n\n    let node = internals.filter(self._tree, criteria, applied);\n    for (let i = 0; i < path.length && node; ++i) {\n        if (typeof node !== 'object') {\n            node = undefined;\n            break;\n        }\n\n        node = internals.filter(node[path[i]], criteria, applied);\n    }\n\n    return node;\n};\n\n\n// Get a meta for node\n\ninternals.Store.prototype.meta = function (key, criteria) {\n\n    const node = this._get(key, criteria);\n    return (typeof node === 'object' ? node.$meta : undefined);\n};\n\ninternals.defaults = function (node, base) {\n\n    base = base || {};\n\n    if (typeof node === 'object' && (Array.isArray(base) === Array.isArray(node))) {\n        return Hoek.merge(Hoek.clone(base), Hoek.clone(node));\n    }\n\n    return node;\n};\n\n\n// Return node or value if no filter, otherwise apply filters until node or value\n\ninternals.filter = function (node, criteria, applied) {\n\n    if (!node ||\n        typeof node !== 'object' ||\n        (!node.$filter && !node.$value)) {\n\n        return node;\n    }\n\n    if (node.$value) {\n        return internals.defaults(internals.filter(node.$value, criteria, applied), node.$base);\n    }\n\n    // Filter\n\n    const filter = node.$filter;\n    const criterion = Hoek.reach(criteria, filter);\n\n    if (criterion !== undefined) {\n        if (node.$range) {\n            for (let i = 0; i < node.$range.length; ++i) {\n                if (criterion <= node.$range[i].limit) {\n                    exports._logApplied(applied, filter, node, node.$range[i]);\n                    return internals.filter(node.$range[i].value, criteria, applied);\n                }\n            }\n        }\n        else if (node[criterion] !== undefined) {\n            exports._logApplied(applied, filter, node, criterion);\n            return internals.defaults(internals.filter(node[criterion], criteria, applied), node.$base);\n        }\n\n        // Falls-through for $default\n    }\n\n    if (Object.prototype.hasOwnProperty.call(node, '$default')) {\n        exports._logApplied(applied, filter, node, '$default');\n        return internals.defaults(internals.filter(node.$default, criteria, applied), node.$base);\n    }\n\n    exports._logApplied(applied, filter, node);\n    return undefined;\n};\n\n\n// Exported to make testing easier\nexports._logApplied = function (applied, filter, node, criterion) {\n\n    if (!applied) {\n        return;\n    }\n\n    const record = {\n        filter: filter\n    };\n\n    if (criterion) {\n        if (typeof criterion === 'object') {\n            if (criterion.id) {\n                record.valueId = criterion.id;\n            }\n            else {\n                record.valueId = (typeof criterion.value === 'object' ? '[object]' : criterion.value.toString());\n            }\n        }\n        else {\n            record.valueId = criterion.toString();\n        }\n    }\n\n    if (node && node.$id) {\n        record.filterId = node.$id;\n    }\n\n    applied.push(record);\n};\n\n\n// Applies criteria on an entire tree\n\ninternals.walk = function (node, criteria, applied) {\n\n    if (!node ||\n        typeof node !== 'object') {\n\n        return node;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(node, '$value')) {\n        return internals.walk(node.$value, criteria, applied);\n    }\n\n    const parent = (node instanceof Array ? [] : {});\n\n    const keys = Object.keys(node);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (key === '$meta' || key === '$id') {\n            continue;\n        }\n        const child = internals.filter(node[key], criteria, applied);\n        const value = internals.walk(child, criteria, applied);\n        if (value !== undefined) {\n            parent[key] = value;\n        }\n    }\n\n    return parent;\n};\n\n\n// Validate tree structure\n\ninternals.Store.validate = function (node, path) {\n\n    path = path || '';\n\n    const error = function (reason) {\n\n        const e = Boom.badRequest(reason);\n        e.path = path || '/';\n        return e;\n    };\n\n    // Valid value\n\n    if (node === null ||\n        node === undefined ||\n        typeof node !== 'object') {\n        return null;\n    }\n\n    // Invalid object\n\n    if (node instanceof Error ||\n        node instanceof Date ||\n        node instanceof RegExp) {\n\n        return error('Invalid node object type');\n    }\n\n    // Invalid keys\n\n    const found = {};\n    const keys = Object.keys(node);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (key[0] === '$') {\n            if (key === '$filter') {\n                found.filter = true;\n                const filter = node[key];\n                if (!filter) {\n                    return error('Invalid empty filter value');\n                }\n\n                if (typeof filter !== 'string') {\n                    return error('Filter value must be a string');\n                }\n\n                if (!filter.match(/^\\w+(?:\\.\\w+)*$/)) {\n                    return error('Invalid filter value ' + node[key]);\n                }\n            }\n            else if (key === '$range') {\n                found.range = true;\n                if (node.$range instanceof Array === false) {\n                    return error('Range value must be an array');\n                }\n\n                if (!node.$range.length) {\n                    return error('Range must include at least one value');\n                }\n\n                let lastLimit = undefined;\n                for (let j = 0; j < node.$range.length; ++j) {\n                    const range = node.$range[j];\n                    if (typeof range !== 'object') {\n                        return error('Invalid range entry type');\n                    }\n\n                    if (!Object.prototype.hasOwnProperty.call(range, 'limit')) {\n                        return error('Range entry missing limit');\n                    }\n\n                    if (typeof range.limit !== 'number') {\n                        return error('Range limit must be a number');\n                    }\n\n                    if (lastLimit !== undefined && range.limit <= lastLimit) {\n                        return error('Range entries not sorted in ascending order - ' + range.limit + ' cannot come after ' + lastLimit);\n                    }\n\n                    lastLimit = range.limit;\n\n                    if (!Object.prototype.hasOwnProperty.call(range, 'value')) {\n                        return error('Range entry missing value');\n                    }\n\n                    const err = internals.Store.validate(range.value, path + '/$range[' + range.limit + ']');\n                    if (err) {\n                        return err;\n                    }\n                }\n            }\n            else if (key === '$default') {\n                found.default = true;\n                const err2 = internals.Store.validate(node.$default, path + '/$default');\n                if (err2) {\n                    return err2;\n                }\n            }\n            else if (key === '$base') {\n                found.base = true;\n            }\n            else if (key === '$meta') {\n                found.meta = true;\n            }\n            else if (key === '$id') {\n                if (!node.$id ||\n                    typeof node.$id !== 'string') {\n\n                    return error('Id value must be a non-empty string');\n                }\n\n                found.id = true;\n            }\n            else if (key === '$value') {\n                found.value = true;\n                const err3 = internals.Store.validate(node.$value, path + '/$value');\n                if (err3) {\n                    return err3;\n                }\n            }\n            else {\n                return error('Unknown $ directive ' + key);\n            }\n        }\n        else {\n            found.key = true;\n            const value = node[key];\n            const err4 = internals.Store.validate(value, path + '/' + key);\n            if (err4) {\n                return err4;\n            }\n        }\n    }\n\n    // Invalid directive combination\n    if (found.value && (found.key || found.range || found.default || found.filter)) {\n        return error('Value directive can only be used with meta or nothing');\n    }\n\n    if (found.default && !found.filter) {\n        return error('Default value without a filter');\n    }\n\n    if (found.filter && !found.default && !found.key && !found.range) {\n        return error('Filter without any values');\n    }\n\n    if (found.filter && found.default && !found.key && !found.range) {\n        return error('Filter with only a default');\n    }\n\n    if (found.range && !found.filter) {\n        return error('Range without a filter');\n    }\n\n    if (found.range && found.key) {\n        return error('Range with non-ranged values');\n    }\n\n    // Valid node\n\n    return null;\n};\n","/home/travis/build/npmtest/node-npmtest-confidence/node_modules/confidence/lib/id.js":"'use strict';\n// Load modules\n\nconst Crypto = require('crypto');\n\n\n// Declare internals\n\nconst internals = {};\n\n\n// Portions based on node-uuid - https://github.com/broofa/node-uuid - Copyright (c) 2010-2012 Robert Kieffer - MIT License\n\ninternals.byteToHex = [];\n\n\ninternals.buildCache = function () {\n\n    for (let i = 0; i < 256; ++i) {\n        const hex = (i < 16 ? '0' : '') + i.toString(16);\n        internals.byteToHex[i] = hex;\n    }\n};\n\ninternals.buildCache();\n\n\nexports.generate = function () {\n\n    let rand = Crypto.randomBytes(10);\n\n    rand[6] = (rand[6] & 0x0f) | 0x40;        // Per RFC 4122 (4.4) - set bits for version and `clock_seq_hi_and_reserved`\n    rand[8] = (rand[8] & 0x3f) | 0x80;\n\n    const b = internals.byteToHex;\n    let id = b[rand[0]] + b[rand[1]] + b[rand[2]] + b[rand[3]] + '-' +\n            b[rand[4]] + b[rand[5]] + '-' +\n            b[rand[6]] + b[rand[7]] + '-' +\n            b[rand[8]] + b[rand[9]] + '-';\n\n    const distributedRandom3B = function () {\n\n        let bytes = '';\n\n        while (!bytes) {                            // This can theoretically loop forever if the machine random device generates garbage\n            rand = Crypto.randomBytes(3);\n            const value = (rand[0] << 16) | (rand[1] << 8) | rand[2];\n            if (value >= 10000000) {\n                continue;\n            }\n\n            bytes = internals.byteToHex[rand[0]] + internals.byteToHex[rand[1]] + internals.byteToHex[rand[2]];\n        }\n\n        return bytes;\n    };\n\n    id += distributedRandom3B();\n    id += distributedRandom3B();\n\n    return id;\n};\n\n\nexports.criteria = function (id) {\n\n    if (!id.match(/^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$/)) {\n        return null;\n    }\n\n    const parse = function (from, to) {\n\n        const hex = id.slice(from, to);\n        const value = parseInt(hex, 16);\n\n        if (value >= 10000000) {\n            return null;\n        }\n\n        const set = value.toString().split('');\n        for (let i = 0; i < set.length; ++i) {\n            set[i] = parseInt(set[i], 10);\n        }\n\n        for (let i = 0; i < 7 - set.length; ++i) {\n            set.unshift(0);\n        }\n\n        return set;\n    };\n\n    const set1 = parse(24, 30);\n    const set2 = parse(30);\n\n    if (set1 === null ||\n        set2 === null) {\n\n        return null;\n    }\n\n    const criteria = {\n        $id: id,\n        random: {\n            a: (set1[0] * 10) + set1[1] + 1,\n            b: (set1[1] * 10) + set1[2] + 1,\n            c: (set1[2] * 10) + set1[3] + 1,\n            d: (set1[3] * 10) + set1[4] + 1,\n            e: (set1[4] * 10) + set1[5] + 1,\n            f: (set1[5] * 10) + set1[6] + 1,\n            g: (set1[6] * 10) + set2[0] + 1,\n            h: (set2[0] * 10) + set2[1] + 1,\n            i: (set2[1] * 10) + set2[2] + 1,\n            j: (set2[2] * 10) + set2[3] + 1,\n            k: (set2[3] * 10) + set2[4] + 1,\n            l: (set2[4] * 10) + set2[5] + 1,\n            m: (set2[5] * 10) + set2[6] + 1,\n            n: (set2[6] * 10) + set1[0] + 1\n        }\n    };\n\n    return criteria;\n};\n\n\n"}